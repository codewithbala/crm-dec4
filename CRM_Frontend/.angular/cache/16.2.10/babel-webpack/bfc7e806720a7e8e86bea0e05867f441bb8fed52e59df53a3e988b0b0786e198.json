{"ast":null,"code":"import { User } from '../model/user';\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthenticationService {\n  http;\n  router;\n  authenticated = false;\n  username = '';\n  password = '';\n  authenticatedUser = '';\n  //userdetails:Principal = new Principal();\n  isUser = false;\n  isAdmin = false;\n  isSU = false;\n  currentUser = new User();\n  // credentials=new Credential();\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n  }\n  authenticate(user) {\n    const headers = new HttpHeaders(user ? {\n      authorization: this.createBasicAuthToken(user.username, user.password)\n    } : {});\n    return this.http.get('http://localhost:8080/loginEndpoints', {\n      headers: headers\n    });\n  }\n  createBasicAuthToken(username, password) {\n    return 'Basic ' + window.btoa(username + \":\" + password);\n  }\n  registerSuccessfulLogin(user) {\n    this.authenticatedUser = this.createBasicAuthToken(user.username, user.password);\n    //this.userdetails = principal\n    console.log(\"register Success Called\");\n    this.authenticated = true;\n    if (user.role === 'USER') this.isUser = true;\n    if (user.role === 'ADMIN') this.isAdmin = true;\n    if (user.role === 'SU') {\n      this.isSU = true;\n      console.log(this.isSU);\n    }\n  }\n  getAuthenticatedUser() {\n    return this.authenticatedUser;\n  }\n  setCurrentUser(user) {\n    this.currentUser = user;\n  }\n  logout() {\n    this.username = \"\";\n    this.password = \"\";\n    this.authenticated = false;\n    this.currentUser = new User();\n    console.log(\"Logout\");\n    this.router.navigate(['/']);\n  }\n  static ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  static ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["User","HttpHeaders","AuthenticationService","http","router","authenticated","username","password","authenticatedUser","isUser","isAdmin","isSU","currentUser","constructor","authenticate","user","headers","authorization","createBasicAuthToken","get","window","btoa","registerSuccessfulLogin","console","log","role","getAuthenticatedUser","setCurrentUser","logout","navigate","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/namcuong757/snva/copy_main2/crm-dec4/CRM_Frontend/src/app/service/authentication.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User } from '../model/user';\nimport { Router } from '@angular/router';\nimport { HttpHeaders, HttpClient } from '@angular/common/http';\nimport { Observable, map } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthenticationService {\n  authenticated = false;\n  public username: String = '';\n  public password: String = '';\n  authenticatedUser:string = '';\n  //userdetails:Principal = new Principal();\n  isUser:boolean = false;\n  isAdmin:boolean = false;\n  isSU:boolean = false;\n  currentUser:User = new User();\n  // credentials=new Credential();\n  constructor(private http: HttpClient,private router:Router) { }\n  authenticate(user:User):Observable<User> {\n    const headers = new HttpHeaders(user ? {\n      authorization : this.createBasicAuthToken(user.username,user.password)\n  } : {});\n \n  return this.http.get<User>('http://localhost:8080/loginEndpoints', {headers: headers})\n}\n\ncreateBasicAuthToken(username: String, password: String) {\n  return 'Basic ' + window.btoa(username + \":\" + password)\n}\n\n\nregisterSuccessfulLogin(user:User) {\n  this.authenticatedUser= this.createBasicAuthToken(user.username,user.password)\n  //this.userdetails = principal\n  console.log(\"register Success Called\");\n  this.authenticated=true;\n  if(user.role==='USER') this.isUser=true\n  if(user.role==='ADMIN') this.isAdmin=true\n  if(user.role==='SU') {\n    this.isSU=true\n    console.log(this.isSU);\n  }\n}\n\ngetAuthenticatedUser():string{\n  return this.authenticatedUser;\n}\n\nsetCurrentUser(user:User)\n{\n  this.currentUser = user;\n}\nlogout(){\n  this.username = \"\";\n  this.password = \"\";\n  this.authenticated=false;\n  this.currentUser = new User(); \n  console.log(\"Logout\");\n  this.router.navigate(['/'])\n  \n}\n  \n}\n"],"mappings":"AACA,SAASA,IAAI,QAAQ,eAAe;AAEpC,SAASC,WAAW,QAAoB,sBAAsB;;;;AAK9D,OAAM,MAAOC,qBAAqB;EAWZC,IAAA;EAAyBC,MAAA;EAV7CC,aAAa,GAAG,KAAK;EACdC,QAAQ,GAAW,EAAE;EACrBC,QAAQ,GAAW,EAAE;EAC5BC,iBAAiB,GAAU,EAAE;EAC7B;EACAC,MAAM,GAAW,KAAK;EACtBC,OAAO,GAAW,KAAK;EACvBC,IAAI,GAAW,KAAK;EACpBC,WAAW,GAAQ,IAAIZ,IAAI,EAAE;EAC7B;EACAa,YAAoBV,IAAgB,EAASC,MAAa;IAAtC,KAAAD,IAAI,GAAJA,IAAI;IAAqB,KAAAC,MAAM,GAANA,MAAM;EAAW;EAC9DU,YAAYA,CAACC,IAAS;IACpB,MAAMC,OAAO,GAAG,IAAIf,WAAW,CAACc,IAAI,GAAG;MACrCE,aAAa,EAAG,IAAI,CAACC,oBAAoB,CAACH,IAAI,CAACT,QAAQ,EAACS,IAAI,CAACR,QAAQ;KACxE,GAAG,EAAE,CAAC;IAEP,OAAO,IAAI,CAACJ,IAAI,CAACgB,GAAG,CAAO,sCAAsC,EAAE;MAACH,OAAO,EAAEA;IAAO,CAAC,CAAC;EACxF;EAEAE,oBAAoBA,CAACZ,QAAgB,EAAEC,QAAgB;IACrD,OAAO,QAAQ,GAAGa,MAAM,CAACC,IAAI,CAACf,QAAQ,GAAG,GAAG,GAAGC,QAAQ,CAAC;EAC1D;EAGAe,uBAAuBA,CAACP,IAAS;IAC/B,IAAI,CAACP,iBAAiB,GAAE,IAAI,CAACU,oBAAoB,CAACH,IAAI,CAACT,QAAQ,EAACS,IAAI,CAACR,QAAQ,CAAC;IAC9E;IACAgB,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;IACtC,IAAI,CAACnB,aAAa,GAAC,IAAI;IACvB,IAAGU,IAAI,CAACU,IAAI,KAAG,MAAM,EAAE,IAAI,CAAChB,MAAM,GAAC,IAAI;IACvC,IAAGM,IAAI,CAACU,IAAI,KAAG,OAAO,EAAE,IAAI,CAACf,OAAO,GAAC,IAAI;IACzC,IAAGK,IAAI,CAACU,IAAI,KAAG,IAAI,EAAE;MACnB,IAAI,CAACd,IAAI,GAAC,IAAI;MACdY,OAAO,CAACC,GAAG,CAAC,IAAI,CAACb,IAAI,CAAC;;EAE1B;EAEAe,oBAAoBA,CAAA;IAClB,OAAO,IAAI,CAAClB,iBAAiB;EAC/B;EAEAmB,cAAcA,CAACZ,IAAS;IAEtB,IAAI,CAACH,WAAW,GAAGG,IAAI;EACzB;EACAa,MAAMA,CAAA;IACJ,IAAI,CAACtB,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACC,QAAQ,GAAG,EAAE;IAClB,IAAI,CAACF,aAAa,GAAC,KAAK;IACxB,IAAI,CAACO,WAAW,GAAG,IAAIZ,IAAI,EAAE;IAC7BuB,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;IACrB,IAAI,CAACpB,MAAM,CAACyB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;EAE7B;;qBAtDa3B,qBAAqB,EAAA4B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;EAAA;;WAArBjC,qBAAqB;IAAAkC,OAAA,EAArBlC,qBAAqB,CAAAmC,IAAA;IAAAC,UAAA,EAFpB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}