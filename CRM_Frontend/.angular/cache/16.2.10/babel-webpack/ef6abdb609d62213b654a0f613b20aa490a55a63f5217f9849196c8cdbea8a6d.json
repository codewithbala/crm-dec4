{"ast":null,"code":"import _asyncToGenerator from \"/Users/namcuong757/snva/copy_main2/crm-dec4/CRM_Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { InterlaceOffsets, InterlaceSteps } from \"./Constants\";\nimport { ByteStream } from \"./ByteStream\";\nfunction parseColorTable(byteStream, count) {\n  const colors = [];\n  for (let i = 0; i < count; i++) {\n    colors.push({\n      r: byteStream.data[byteStream.pos],\n      g: byteStream.data[byteStream.pos + 1],\n      b: byteStream.data[byteStream.pos + 2]\n    });\n    byteStream.pos += 3;\n  }\n  return colors;\n}\nfunction parseExtensionBlock(_x, _x2, _x3, _x4) {\n  return _parseExtensionBlock.apply(this, arguments);\n}\nfunction _parseExtensionBlock() {\n  _parseExtensionBlock = _asyncToGenerator(function* (byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch (byteStream.nextByte()) {\n      case 249:\n        {\n          const frame = gif.frames[getFrameIndex(false)];\n          byteStream.pos++;\n          const packedByte = byteStream.nextByte();\n          frame.GCreserved = (packedByte & 0xe0) >>> 5;\n          frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n          frame.userInputDelayFlag = (packedByte & 2) === 2;\n          const transparencyFlag = (packedByte & 1) === 1;\n          frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n          const transparencyIndex = byteStream.nextByte();\n          if (transparencyFlag) {\n            getTransparencyIndex(transparencyIndex);\n          }\n          byteStream.pos++;\n          break;\n        }\n      case 255:\n        {\n          byteStream.pos++;\n          const applicationExtension = {\n            identifier: byteStream.getString(8),\n            authenticationCode: byteStream.getString(3),\n            data: byteStream.readSubBlocksBin()\n          };\n          gif.applicationExtensions.push(applicationExtension);\n          break;\n        }\n      case 254:\n        {\n          gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n          break;\n        }\n      case 1:\n        {\n          if (gif.globalColorTable.length === 0) {\n            throw new EvalError(\"plain text extension without global color table\");\n          }\n          byteStream.pos++;\n          gif.frames[getFrameIndex(false)].plainTextData = {\n            left: byteStream.nextTwoBytes(),\n            top: byteStream.nextTwoBytes(),\n            width: byteStream.nextTwoBytes(),\n            height: byteStream.nextTwoBytes(),\n            charSize: {\n              width: byteStream.nextTwoBytes(),\n              height: byteStream.nextTwoBytes()\n            },\n            foregroundColor: byteStream.nextByte(),\n            backgroundColor: byteStream.nextByte(),\n            text: byteStream.readSubBlocks()\n          };\n          break;\n        }\n      default:\n        byteStream.skipSubBlocks();\n        break;\n    }\n  });\n  return _parseExtensionBlock.apply(this, arguments);\n}\nfunction parseImageBlock(_x5, _x6, _x7, _x8, _x9, _x10) {\n  return _parseImageBlock.apply(this, arguments);\n}\nfunction _parseImageBlock() {\n  _parseImageBlock = _asyncToGenerator(function* (byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(),\n      localColorTableFlag = (packedByte & 0x80) === 0x80,\n      interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << (packedByte & 7) + 1;\n    if (localColorTableFlag) {\n      frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = index => {\n      const {\n        r,\n        g,\n        b\n      } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n      return {\n        r,\n        g,\n        b,\n        a: index === getTransparencyIndex(null) ? avgAlpha ? ~~((r + g + b) / 3) : 0 : 255\n      };\n    };\n    const image = (() => {\n      try {\n        return new ImageData(frame.width, frame.height, {\n          colorSpace: \"srgb\"\n        });\n      } catch (error) {\n        if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n          return null;\n        }\n        throw error;\n      }\n    })();\n    if (image == null) {\n      throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(),\n      imageData = byteStream.readSubBlocksBin(),\n      clearCode = 1 << minCodeSize;\n    const readBits = (pos, len) => {\n      const bytePos = pos >>> 3,\n        bitPos = pos & 7;\n      return (imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16) & (1 << len) - 1 << bitPos) >>> bitPos;\n    };\n    if (interlacedFlag) {\n      for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n        if (InterlaceOffsets[pass] < frame.height) {\n          for (let pixelPos = 0, lineIndex = 0;;) {\n            const last = code;\n            code = readBits(pos, size);\n            pos += size + 1;\n            if (code === clearCode) {\n              size = minCodeSize + 1;\n              dic.length = clearCode + 2;\n              for (let i = 0; i < dic.length; i++) {\n                dic[i] = i < clearCode ? [i] : [];\n              }\n            } else {\n              if (code >= dic.length) {\n                dic.push(dic[last].concat(dic[last][0]));\n              } else if (last !== clearCode) {\n                dic.push(dic[last].concat(dic[code][0]));\n              }\n              for (let i = 0; i < dic[code].length; i++) {\n                const {\n                  r,\n                  g,\n                  b,\n                  a\n                } = getColor(dic[code][i]);\n                image.data.set([r, g, b, a], InterlaceOffsets[pass] * frame.width + InterlaceSteps[pass] * lineIndex + pixelPos % (frame.width * 4));\n                pixelPos += 4;\n              }\n              if (dic.length === 1 << size && size < 0xc) {\n                size++;\n              }\n            }\n            if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n              lineIndex++;\n              if (InterlaceOffsets[pass] + InterlaceSteps[pass] * lineIndex >= frame.height) {\n                break;\n              }\n            }\n          }\n        }\n        progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, {\n          x: frame.left,\n          y: frame.top\n        }, {\n          width: gif.width,\n          height: gif.height\n        });\n      }\n      frame.image = image;\n      frame.bitmap = yield createImageBitmap(image);\n    } else {\n      for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pixelPos = -4;;) {\n        const last = code;\n        code = readBits(pos, size);\n        pos += size;\n        if (code === clearCode) {\n          size = minCodeSize + 1;\n          dic.length = clearCode + 2;\n          for (let i = 0; i < dic.length; i++) {\n            dic[i] = i < clearCode ? [i] : [];\n          }\n        } else {\n          if (code === clearCode + 1) {\n            break;\n          }\n          if (code >= dic.length) {\n            dic.push(dic[last].concat(dic[last][0]));\n          } else if (last !== clearCode) {\n            dic.push(dic[last].concat(dic[code][0]));\n          }\n          for (let i = 0; i < dic[code].length; i++) {\n            const {\n              r,\n              g,\n              b,\n              a\n            } = getColor(dic[code][i]);\n            image.data.set([r, g, b, a], pixelPos += 4);\n          }\n          if (dic.length >= 1 << size && size < 0xc) {\n            size++;\n          }\n        }\n      }\n      frame.image = image;\n      frame.bitmap = yield createImageBitmap(image);\n      progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, {\n        x: frame.left,\n        y: frame.top\n      }, {\n        width: gif.width,\n        height: gif.height\n      });\n    }\n  });\n  return _parseImageBlock.apply(this, arguments);\n}\nfunction parseBlock(_x11, _x12, _x13, _x14, _x15, _x16) {\n  return _parseBlock.apply(this, arguments);\n}\nfunction _parseBlock() {\n  _parseBlock = _asyncToGenerator(function* (byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch (byteStream.nextByte()) {\n      case 59:\n        return true;\n      case 44:\n        yield parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n        break;\n      case 33:\n        yield parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n        break;\n      default:\n        throw new EvalError(\"undefined block found\");\n    }\n    return false;\n  });\n  return _parseBlock.apply(this, arguments);\n}\nexport function getGIFLoopAmount(gif) {\n  for (const extension of gif.applicationExtensions) {\n    if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n      continue;\n    }\n    return extension.data[1] + (extension.data[2] << 8);\n  }\n  return NaN;\n}\nexport function decodeGIF(_x17, _x18, _x19) {\n  return _decodeGIF.apply(this, arguments);\n}\nfunction _decodeGIF() {\n  _decodeGIF = _asyncToGenerator(function* (gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha) avgAlpha = false;\n    const res = yield fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n      throw new EvalError(\"file not found\");\n    }\n    const buffer = yield res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, {\n          colorSpace: \"srgb\"\n        }),\n        comments: [],\n        applicationExtensions: []\n      },\n      byteStream = new ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n      throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(),\n      globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << (packedByte & 7) + 1,\n      backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n      gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n      gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (() => {\n      try {\n        return new ImageData(gif.width, gif.height, {\n          colorSpace: \"srgb\"\n        });\n      } catch (error) {\n        if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n          return null;\n        }\n        throw error;\n      }\n    })();\n    if (backgroundImage == null) {\n      throw new Error(\"GIF frame size is to large\");\n    }\n    const {\n      r,\n      g,\n      b\n    } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n      backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1,\n      incrementFrameIndex = true,\n      transparencyIndex = -1;\n    const getframeIndex = increment => {\n      if (increment) {\n        incrementFrameIndex = true;\n      }\n      return frameIndex;\n    };\n    const getTransparencyIndex = newValue => {\n      if (newValue != null) {\n        transparencyIndex = newValue;\n      }\n      return transparencyIndex;\n    };\n    try {\n      do {\n        if (incrementFrameIndex) {\n          gif.frames.push({\n            left: 0,\n            top: 0,\n            width: 0,\n            height: 0,\n            disposalMethod: 0,\n            image: new ImageData(1, 1, {\n              colorSpace: \"srgb\"\n            }),\n            plainTextData: null,\n            userInputDelayFlag: false,\n            delayTime: 0,\n            sortFlag: false,\n            localColorTable: [],\n            reserved: 0,\n            GCreserved: 0\n          });\n          frameIndex++;\n          transparencyIndex = -1;\n          incrementFrameIndex = false;\n        }\n      } while (!(yield parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n      gif.frames.length--;\n      for (const frame of gif.frames) {\n        if (frame.userInputDelayFlag && frame.delayTime === 0) {\n          gif.totalTime = Infinity;\n          break;\n        }\n        gif.totalTime += frame.delayTime;\n      }\n      return gif;\n    } catch (error) {\n      if (error instanceof EvalError) {\n        throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n      }\n      throw error;\n    }\n  });\n  return _decodeGIF.apply(this, arguments);\n}","map":{"version":3,"names":["InterlaceOffsets","InterlaceSteps","ByteStream","parseColorTable","byteStream","count","colors","i","push","r","data","pos","g","b","parseExtensionBlock","_x","_x2","_x3","_x4","_parseExtensionBlock","apply","arguments","_asyncToGenerator","gif","getFrameIndex","getTransparencyIndex","nextByte","frame","frames","packedByte","GCreserved","disposalMethod","userInputDelayFlag","transparencyFlag","delayTime","nextTwoBytes","transparencyIndex","applicationExtension","identifier","getString","authenticationCode","readSubBlocksBin","applicationExtensions","comments","readSubBlocks","globalColorTable","length","EvalError","plainTextData","left","top","width","height","charSize","foregroundColor","backgroundColor","text","skipSubBlocks","parseImageBlock","_x5","_x6","_x7","_x8","_x9","_x10","_parseImageBlock","avgAlpha","progressCallback","localColorTableFlag","interlacedFlag","sortFlag","reserved","localColorCount","localColorTable","getColor","index","a","image","ImageData","colorSpace","error","DOMException","name","minCodeSize","imageData","clearCode","readBits","len","bytePos","bitPos","code","size","dic","pass","pixelPos","lineIndex","last","concat","set","x","y","bitmap","createImageBitmap","parseBlock","_x11","_x12","_x13","_x14","_x15","_x16","_parseBlock","getGIFLoopAmount","extension","NaN","decodeGIF","_x17","_x18","_x19","_decodeGIF","gifURL","res","fetch","ok","status","buffer","arrayBuffer","totalTime","colorRes","pixelAspectRatio","backgroundImage","Uint8ClampedArray","Error","globalColorTableFlag","globalColorCount","backgroundColorIndex","copyWithin","frameIndex","incrementFrameIndex","getframeIndex","increment","newValue","Infinity","message"],"sources":["/Users/namcuong757/snva/copy_main2/crm-dec4/CRM_Frontend/node_modules/tsparticles-shape-image/esm/GifUtils/Utils.js"],"sourcesContent":["import { InterlaceOffsets, InterlaceSteps } from \"./Constants\";\nimport { ByteStream } from \"./ByteStream\";\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2],\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nasync function parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch (byteStream.nextByte()) {\n        case 249: {\n            const frame = gif.frames[getFrameIndex(false)];\n            byteStream.pos++;\n            const packedByte = byteStream.nextByte();\n            frame.GCreserved = (packedByte & 0xe0) >>> 5;\n            frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n            frame.userInputDelayFlag = (packedByte & 2) === 2;\n            const transparencyFlag = (packedByte & 1) === 1;\n            frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n            const transparencyIndex = byteStream.nextByte();\n            if (transparencyFlag) {\n                getTransparencyIndex(transparencyIndex);\n            }\n            byteStream.pos++;\n            break;\n        }\n        case 255: {\n            byteStream.pos++;\n            const applicationExtension = {\n                identifier: byteStream.getString(8),\n                authenticationCode: byteStream.getString(3),\n                data: byteStream.readSubBlocksBin(),\n            };\n            gif.applicationExtensions.push(applicationExtension);\n            break;\n        }\n        case 254: {\n            gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n            break;\n        }\n        case 1: {\n            if (gif.globalColorTable.length === 0) {\n                throw new EvalError(\"plain text extension without global color table\");\n            }\n            byteStream.pos++;\n            gif.frames[getFrameIndex(false)].plainTextData = {\n                left: byteStream.nextTwoBytes(),\n                top: byteStream.nextTwoBytes(),\n                width: byteStream.nextTwoBytes(),\n                height: byteStream.nextTwoBytes(),\n                charSize: {\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                },\n                foregroundColor: byteStream.nextByte(),\n                backgroundColor: byteStream.nextByte(),\n                text: byteStream.readSubBlocks(),\n            };\n            break;\n        }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << ((packedByte & 7) + 1);\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index) => {\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        return { r, g, b, a: index === getTransparencyIndex(null) ? (avgAlpha ? ~~((r + g + b) / 3) : 0) : 255 };\n    };\n    const image = (() => {\n        try {\n            return new ImageData(frame.width, frame.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len) => {\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (((imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16)) &\n            (((1 << len) - 1) << bitPos)) >>>\n            bitPos);\n    };\n    if (interlacedFlag) {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n            if (InterlaceOffsets[pass] < frame.height) {\n                for (let pixelPos = 0, lineIndex = 0;;) {\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for (let i = 0; i < dic.length; i++) {\n                            dic[i] = i < clearCode ? [i] : [];\n                        }\n                    }\n                    else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        }\n                        else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for (let i = 0; i < dic[code].length; i++) {\n                            const { r, g, b, a } = getColor(dic[code][i]);\n                            image.data.set([r, g, b, a], InterlaceOffsets[pass] * frame.width +\n                                InterlaceSteps[pass] * lineIndex +\n                                (pixelPos % (frame.width * 4)));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (InterlaceOffsets[pass] + InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            break;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    }\n    else {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pixelPos = -4;;) {\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for (let i = 0; i < dic.length; i++) {\n                    dic[i] = i < clearCode ? [i] : [];\n                }\n            }\n            else {\n                if (code === clearCode + 1) {\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                }\n                else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for (let i = 0; i < dic[code].length; i++) {\n                    const { r, g, b, a } = getColor(dic[code][i]);\n                    image.data.set([r, g, b, a], (pixelPos += 4));\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch (byteStream.nextByte()) {\n        case 59:\n            return true;\n        case 44:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case 33:\n            await parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nexport function getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions) {\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nexport async function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha)\n        avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n        comments: [],\n        applicationExtensions: [],\n    }, byteStream = new ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << ((packedByte & 7) + 1), backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (() => {\n        try {\n            return new ImageData(gif.width, gif.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment) => {\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue) => {\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: 0,\n                    image: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0,\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n        gif.frames.length--;\n        for (const frame of gif.frames) {\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    }\n    catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n        }\n        throw error;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}