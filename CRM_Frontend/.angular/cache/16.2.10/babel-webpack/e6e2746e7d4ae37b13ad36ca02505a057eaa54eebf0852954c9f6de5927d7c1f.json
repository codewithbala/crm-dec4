{"ast":null,"code":"import _asyncToGenerator from \"/Users/namcuong757/snva/copy_main2/crm-dec4/CRM_Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { errorPrefix } from \"tsparticles-engine\";\nimport { replaceImageColor } from \"./Utils\";\nexport class ImageDrawer {\n  constructor(engine) {\n    var _this = this;\n    this.loadImageShape = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (imageShape) {\n        if (!_this._engine.loadImage) {\n          throw new Error(`${errorPrefix} image shape not initialized`);\n        }\n        yield _this._engine.loadImage({\n          gif: imageShape.gif,\n          name: imageShape.name,\n          replaceColor: imageShape.replaceColor ?? imageShape.replace_color ?? false,\n          src: imageShape.src\n        });\n      });\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    this._engine = engine;\n  }\n  addImage(image) {\n    if (!this._engine.images) {\n      this._engine.images = [];\n    }\n    this._engine.images.push(image);\n  }\n  draw(context, particle, radius, opacity, delta) {\n    const image = particle.image,\n      element = image?.element;\n    if (!image) {\n      return;\n    }\n    context.globalAlpha = opacity;\n    if (image.gif && image.gifData) {\n      const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height),\n        offscreenContext = offscreenCanvas.getContext(\"2d\");\n      if (!offscreenContext) {\n        throw new Error(\"could not create offscreen canvas context\");\n      }\n      offscreenContext.imageSmoothingQuality = \"low\";\n      offscreenContext.imageSmoothingEnabled = false;\n      offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n      if (particle.gifLoopCount === undefined) {\n        particle.gifLoopCount = image.gifLoopCount ?? 0;\n      }\n      let frameIndex = particle.gifFrame ?? 0;\n      const pos = {\n          x: -image.gifData.width * 0.5,\n          y: -image.gifData.height * 0.5\n        },\n        frame = image.gifData.frames[frameIndex];\n      if (particle.gifTime === undefined) {\n        particle.gifTime = 0;\n      }\n      if (!frame.bitmap) {\n        return;\n      }\n      context.scale(radius / image.gifData.width, radius / image.gifData.height);\n      switch (frame.disposalMethod) {\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 0:\n          offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n          context.drawImage(offscreenCanvas, pos.x, pos.y);\n          offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n          break;\n        case 1:\n          offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n          context.drawImage(offscreenCanvas, pos.x, pos.y);\n          break;\n        case 2:\n          offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n          context.drawImage(offscreenCanvas, pos.x, pos.y);\n          offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n          if (image.gifData.globalColorTable.length === 0) {\n            offscreenContext.putImageData(image.gifData.frames[0].image, pos.x + frame.left, pos.y + frame.top);\n          } else {\n            offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n          }\n          break;\n        case 3:\n          {\n            const previousImageData = offscreenContext.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n            offscreenContext.putImageData(previousImageData, 0, 0);\n          }\n          break;\n      }\n      particle.gifTime += delta.value;\n      if (particle.gifTime > frame.delayTime) {\n        particle.gifTime -= frame.delayTime;\n        if (++frameIndex >= image.gifData.frames.length) {\n          if (--particle.gifLoopCount <= 0) {\n            return;\n          }\n          frameIndex = 0;\n          offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n        }\n        particle.gifFrame = frameIndex;\n      }\n      context.scale(image.gifData.width / radius, image.gifData.height / radius);\n    } else if (element) {\n      const ratio = image.ratio,\n        pos = {\n          x: -radius,\n          y: -radius\n        };\n      context.drawImage(element, pos.x, pos.y, radius * 2, radius * 2 / ratio);\n    }\n    context.globalAlpha = 1;\n  }\n  getSidesCount() {\n    return 12;\n  }\n  init(container) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const options = container.actualOptions;\n      if (!options.preload || !_this2._engine.loadImage) {\n        return;\n      }\n      for (const imageData of options.preload) {\n        yield _this2._engine.loadImage(imageData);\n      }\n    })();\n  }\n  loadShape(particle) {\n    if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n      return;\n    }\n    if (!this._engine.images) {\n      this._engine.images = [];\n    }\n    const imageData = particle.shapeData,\n      image = this._engine.images.find(t => t.name === imageData.name || t.source === imageData.src);\n    if (!image) {\n      this.loadImageShape(imageData).then(() => {\n        this.loadShape(particle);\n      });\n    }\n  }\n  particleInit(container, particle) {\n    if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n      return;\n    }\n    if (!this._engine.images) {\n      this._engine.images = [];\n    }\n    const images = this._engine.images,\n      imageData = particle.shapeData,\n      color = particle.getFillColor(),\n      image = images.find(t => t.name === imageData.name || t.source === imageData.src);\n    if (!image) {\n      return;\n    }\n    const replaceColor = imageData.replaceColor ?? imageData.replace_color ?? image.replaceColor;\n    if (image.loading) {\n      setTimeout(() => {\n        this.particleInit(container, particle);\n      });\n      return;\n    }\n    _asyncToGenerator(function* () {\n      let imageRes;\n      if (image.svgData && color) {\n        imageRes = yield replaceImageColor(image, imageData, color, particle);\n      } else {\n        imageRes = {\n          color,\n          data: image,\n          element: image.element,\n          gif: image.gif,\n          gifData: image.gifData,\n          gifLoopCount: image.gifLoopCount,\n          loaded: true,\n          ratio: imageData.width && imageData.height ? imageData.width / imageData.height : image.ratio ?? 1,\n          replaceColor: replaceColor,\n          source: imageData.src\n        };\n      }\n      if (!imageRes.ratio) {\n        imageRes.ratio = 1;\n      }\n      const fill = imageData.fill ?? particle.fill,\n        close = imageData.close ?? particle.close,\n        imageShape = {\n          image: imageRes,\n          fill,\n          close\n        };\n      particle.image = imageShape.image;\n      particle.fill = imageShape.fill;\n      particle.close = imageShape.close;\n    })();\n  }\n}","map":{"version":3,"names":["errorPrefix","replaceImageColor","ImageDrawer","constructor","engine","_this","loadImageShape","_ref","_asyncToGenerator","imageShape","_engine","loadImage","Error","gif","name","replaceColor","replace_color","src","_x","apply","arguments","addImage","image","images","push","draw","context","particle","radius","opacity","delta","element","globalAlpha","gifData","offscreenCanvas","OffscreenCanvas","width","height","offscreenContext","getContext","imageSmoothingQuality","imageSmoothingEnabled","clearRect","gifLoopCount","undefined","frameIndex","gifFrame","pos","x","y","frame","frames","gifTime","bitmap","scale","disposalMethod","drawImage","left","top","globalColorTable","length","putImageData","backgroundImage","previousImageData","getImageData","value","delayTime","ratio","getSidesCount","init","container","_this2","options","actualOptions","preload","imageData","loadShape","shape","shapeData","find","t","source","then","particleInit","color","getFillColor","loading","setTimeout","imageRes","svgData","data","loaded","fill","close"],"sources":["/Users/namcuong757/snva/copy_main2/crm-dec4/CRM_Frontend/node_modules/tsparticles-shape-image/esm/ImageDrawer.js"],"sourcesContent":["import { errorPrefix } from \"tsparticles-engine\";\nimport { replaceImageColor } from \"./Utils\";\nexport class ImageDrawer {\n    constructor(engine) {\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? imageShape.replace_color ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    draw(context, particle, radius, opacity, delta) {\n        const image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n            if (!offscreenContext) {\n                throw new Error(\"could not create offscreen canvas context\");\n            }\n            offscreenContext.imageSmoothingQuality = \"low\";\n            offscreenContext.imageSmoothingEnabled = false;\n            offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n            if (particle.gifLoopCount === undefined) {\n                particle.gifLoopCount = image.gifLoopCount ?? 0;\n            }\n            let frameIndex = particle.gifFrame ?? 0;\n            const pos = { x: -image.gifData.width * 0.5, y: -image.gifData.height * 0.5 }, frame = image.gifData.frames[frameIndex];\n            if (particle.gifTime === undefined) {\n                particle.gifTime = 0;\n            }\n            if (!frame.bitmap) {\n                return;\n            }\n            context.scale(radius / image.gifData.width, radius / image.gifData.height);\n            switch (frame.disposalMethod) {\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 0:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    break;\n                case 1:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    break;\n                case 2:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    if (image.gifData.globalColorTable.length === 0) {\n                        offscreenContext.putImageData(image.gifData.frames[0].image, pos.x + frame.left, pos.y + frame.top);\n                    }\n                    else {\n                        offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n                    }\n                    break;\n                case 3:\n                    {\n                        const previousImageData = offscreenContext.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                        context.drawImage(offscreenCanvas, pos.x, pos.y);\n                        offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.putImageData(previousImageData, 0, 0);\n                    }\n                    break;\n            }\n            particle.gifTime += delta.value;\n            if (particle.gifTime > frame.delayTime) {\n                particle.gifTime -= frame.delayTime;\n                if (++frameIndex >= image.gifData.frames.length) {\n                    if (--particle.gifLoopCount <= 0) {\n                        return;\n                    }\n                    frameIndex = 0;\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                }\n                particle.gifFrame = frameIndex;\n            }\n            context.scale(image.gifData.width / radius, image.gifData.height / radius);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            };\n            context.drawImage(element, pos.x, pos.y, radius * 2, (radius * 2) / ratio);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData, image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            this.loadImageShape(imageData).then(() => {\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData, color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? imageData.replace_color ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        (async () => {\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await replaceImageColor(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    gif: image.gif,\n                    gifData: image.gifData,\n                    gifLoopCount: image.gifLoopCount,\n                    loaded: true,\n                    ratio: imageData.width && imageData.height ? imageData.width / imageData.height : image.ratio ?? 1,\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = imageData.fill ?? particle.fill, close = imageData.close ?? particle.close, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.fill = imageShape.fill;\n            particle.close = imageShape.close;\n        })();\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}