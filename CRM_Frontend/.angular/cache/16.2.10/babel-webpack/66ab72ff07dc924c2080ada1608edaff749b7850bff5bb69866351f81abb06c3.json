{"ast":null,"code":"import _asyncToGenerator from \"/Users/namcuong757/snva/copy_main2/crm-dec4/CRM_Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { clamp, executeOnSingleOrMultiple, getLogger, isArray, isNumber, itemFromArray, itemFromSingleOrMultiple } from \"tsparticles-engine\";\nimport { getNoteFrequency } from \"./utils\";\nfunction initImage(data) {\n  const img = document.createElement(\"img\"),\n    {\n      clickCb,\n      container,\n      display,\n      iconOptions,\n      margin,\n      options,\n      pos,\n      rightOffsets\n    } = data,\n    {\n      width,\n      path,\n      svg\n    } = iconOptions;\n  setIconStyle(img, pos.top + margin, pos.right - (margin * (rightOffsets.length + 1) + width + rightOffsets.reduce((a, b) => a + b, 0)), display, options.fullScreen.zIndex + 1, width, margin);\n  img.src = path ?? (svg ? `data:image/svg+xml;base64,${btoa(svg)}` : \"\");\n  const parent = container.canvas.element?.parentNode || document.body;\n  parent.append(img);\n  img.addEventListener(\"click\", clickCb);\n  return img;\n}\nfunction removeImage(image) {\n  if (!image) {\n    return;\n  }\n  image.remove();\n}\nfunction setIconStyle(icon, top, left, display, zIndex, width, margin) {\n  icon.style.userSelect = \"none\";\n  icon.style.webkitUserSelect = \"none\";\n  icon.style.position = \"absolute\";\n  icon.style.top = `${top + margin}px`;\n  icon.style.left = `${left - margin - width}px`;\n  icon.style.display = display;\n  icon.style.zIndex = `${zIndex + 1}`;\n}\nexport class SoundsInstance {\n  constructor(container, engine) {\n    var _this = this;\n    this._addBuffer = audioCtx => {\n      const buffer = audioCtx.createBufferSource();\n      this._audioSources.push(buffer);\n      return buffer;\n    };\n    this._addOscillator = audioCtx => {\n      const oscillator = audioCtx.createOscillator();\n      this._audioSources.push(oscillator);\n      return oscillator;\n    };\n    this._initEvents = () => {\n      const container = this._container,\n        soundsOptions = container.actualOptions.sounds;\n      if (!soundsOptions?.enable || !container.canvas.element) {\n        return;\n      }\n      for (const event of soundsOptions.events) {\n        const cb = /*#__PURE__*/function () {\n          var _ref = _asyncToGenerator(function* (args) {\n            if (_this._container !== args.container) {\n              return;\n            }\n            if (!_this._container || _this._container.muted || _this._container.destroyed) {\n              executeOnSingleOrMultiple(event.event, item => {\n                _this._engine.removeEventListener(item, cb);\n              });\n              return;\n            }\n            if (event.filter && !event.filter(args)) {\n              return;\n            }\n            if (event.audio) {\n              _this._playBuffer(itemFromSingleOrMultiple(event.audio));\n            } else if (event.melodies) {\n              const melody = itemFromArray(event.melodies);\n              if (melody.melodies.length) {\n                yield Promise.allSettled(melody.melodies.map(m => _this._playNote(m.notes, 0, melody.loop)));\n              } else {\n                yield _this._playNote(melody.notes, 0, melody.loop);\n              }\n            } else if (event.notes) {\n              const note = itemFromArray(event.notes);\n              yield _this._playNote([note], 0, false);\n            }\n          });\n          return function cb(_x) {\n            return _ref.apply(this, arguments);\n          };\n        }();\n        executeOnSingleOrMultiple(event.event, item => {\n          this._engine.addEventListener(item, cb);\n        });\n      }\n    };\n    this._mute = () => {\n      const container = this._container;\n      if (!container.audioContext) {\n        return;\n      }\n      for (const source of this._audioSources) {\n        this._removeAudioSource(source);\n      }\n      if (this._gain) {\n        this._gain.disconnect();\n      }\n      container.audioContext.close();\n      container.audioContext = undefined;\n      this._engine.dispatchEvent(\"soundsMuted\", {\n        container: this._container\n      });\n    };\n    this._playBuffer = audio => {\n      const audioBuffer = this._audioMap.get(audio.source);\n      if (!audioBuffer) {\n        return;\n      }\n      const audioCtx = this._container.audioContext;\n      if (!audioCtx) {\n        return;\n      }\n      const source = this._addBuffer(audioCtx);\n      source.loop = audio.loop;\n      source.buffer = audioBuffer;\n      source.connect(this._gain ?? audioCtx.destination);\n      source.start();\n    };\n    this._playFrequency = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (frequency, duration) {\n        if (!_this._container.audioContext || !_this._gain) {\n          return;\n        }\n        const oscillator = _this._addOscillator(_this._container.audioContext);\n        oscillator.connect(_this._gain);\n        oscillator.type = \"sine\";\n        oscillator.frequency.value = frequency;\n        oscillator.start();\n        return new Promise(resolve => {\n          setTimeout(() => {\n            _this._removeAudioSource(oscillator);\n            resolve();\n          }, duration);\n        });\n      });\n      return function (_x2, _x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    this._playMuteSound = () => {\n      const container = this._container;\n      if (!container.audioContext) {\n        return;\n      }\n      const gain = container.audioContext.createGain();\n      gain.connect(container.audioContext.destination);\n      gain.gain.value = 0;\n      const oscillator = container.audioContext.createOscillator();\n      oscillator.connect(gain);\n      oscillator.type = \"sine\";\n      oscillator.frequency.value = 1;\n      oscillator.start();\n      setTimeout(() => {\n        oscillator.stop();\n        oscillator.disconnect();\n        gain.disconnect();\n      });\n    };\n    this._playNote = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator(function* (notes, noteIdx, loop) {\n        if (_this._container.muted) {\n          return;\n        }\n        const note = notes[noteIdx];\n        if (!note) {\n          return;\n        }\n        const value = note.value;\n        const promises = executeOnSingleOrMultiple(value, /*#__PURE__*/function () {\n          var _ref4 = _asyncToGenerator(function* (_, idx) {\n            return _this._playNoteValue(notes, noteIdx, idx);\n          });\n          return function (_x7, _x8) {\n            return _ref4.apply(this, arguments);\n          };\n        }());\n        yield isArray(promises) ? Promise.allSettled(promises) : promises;\n        let nextNoteIdx = noteIdx + 1;\n        if (loop && nextNoteIdx >= notes.length) {\n          nextNoteIdx = nextNoteIdx % notes.length;\n        }\n        if (_this._container.muted) {\n          return;\n        }\n        yield _this._playNote(notes, nextNoteIdx, loop);\n      });\n      return function (_x4, _x5, _x6) {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n    this._playNoteValue = /*#__PURE__*/function () {\n      var _ref5 = _asyncToGenerator(function* (notes, noteIdx, valueIdx) {\n        const note = notes[noteIdx];\n        if (!note) {\n          return;\n        }\n        const value = itemFromSingleOrMultiple(note.value, valueIdx, true);\n        try {\n          const freq = getNoteFrequency(value);\n          if (!isNumber(freq)) {\n            return;\n          }\n          yield _this._playFrequency(freq, note.duration);\n        } catch (e) {\n          getLogger().error(e);\n        }\n      });\n      return function (_x9, _x10, _x11) {\n        return _ref5.apply(this, arguments);\n      };\n    }();\n    this._removeAudioSource = source => {\n      source.stop();\n      source.disconnect();\n      this._audioSources.splice(this._audioSources.indexOf(source), 1);\n    };\n    this._unmute = () => {\n      const container = this._container,\n        options = container.actualOptions,\n        soundsOptions = options.sounds;\n      if (!soundsOptions) {\n        return;\n      }\n      if (!container.audioContext) {\n        container.audioContext = new AudioContext();\n      }\n      const {\n        audioContext\n      } = container;\n      if (!this._audioSources) {\n        this._audioSources = [];\n      }\n      const gain = audioContext.createGain();\n      gain.connect(audioContext.destination);\n      gain.gain.value = soundsOptions.volume.value / 100;\n      this._gain = gain;\n      this._initEvents();\n      this._engine.dispatchEvent(\"soundsUnmuted\", {\n        container: this._container\n      });\n    };\n    this._updateMuteIcons = () => {\n      const container = this._container,\n        muteImg = this._muteImg,\n        unmuteImg = this._unmuteImg;\n      if (muteImg) {\n        muteImg.style.display = container.muted ? \"block\" : \"none\";\n      }\n      if (unmuteImg) {\n        unmuteImg.style.display = container.muted ? \"none\" : \"block\";\n      }\n    };\n    this._updateMuteStatus = () => {\n      const container = this._container;\n      if (container.muted) {\n        this._mute();\n      } else {\n        this._unmute();\n        this._playMuteSound();\n      }\n    };\n    this._updateVolume = () => {\n      const container = this._container,\n        soundsOptions = container.actualOptions.sounds;\n      if (!soundsOptions?.enable) {\n        return;\n      }\n      clamp(this._volume, soundsOptions.volume.min, soundsOptions.volume.max);\n      let stateChanged = false;\n      if (this._volume <= 0 && !container.muted) {\n        this._volume = 0;\n        container.muted = true;\n        stateChanged = true;\n      } else if (this._volume > 0 && container.muted) {\n        container.muted = false;\n        stateChanged = true;\n      }\n      if (stateChanged) {\n        this._updateMuteIcons();\n        this._updateMuteStatus();\n      }\n      if (this._gain?.gain) {\n        this._gain.gain.value = this._volume / 100;\n      }\n    };\n    this._container = container;\n    this._engine = engine;\n    this._volume = 0;\n    this._audioSources = [];\n    this._audioMap = new Map();\n  }\n  init() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const container = _this2._container,\n        options = container.actualOptions,\n        soundsOptions = options.sounds;\n      if (!soundsOptions?.enable) {\n        return;\n      }\n      _this2._volume = soundsOptions.volume.value;\n      const events = soundsOptions.events;\n      _this2._audioMap = new Map();\n      for (const event of events) {\n        if (!event.audio) {\n          continue;\n        }\n        executeOnSingleOrMultiple(event.audio, /*#__PURE__*/function () {\n          var _ref6 = _asyncToGenerator(function* (audio) {\n            const response = yield fetch(audio.source);\n            if (!response.ok) {\n              return;\n            }\n            const arrayBuffer = yield response.arrayBuffer();\n            container.audioContext = new AudioContext();\n            const audioBuffer = yield container.audioContext.decodeAudioData(arrayBuffer);\n            _this2._audioMap.set(audio.source, audioBuffer);\n          });\n          return function (_x12) {\n            return _ref6.apply(this, arguments);\n          };\n        }());\n      }\n    })();\n  }\n  start() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      const container = _this3._container,\n        options = container.actualOptions,\n        soundsOptions = options.sounds;\n      if (!soundsOptions?.enable || !container.canvas.element) {\n        return;\n      }\n      container.muted = true;\n      const canvas = container.canvas.element,\n        pos = {\n          top: canvas.offsetTop,\n          right: canvas.offsetLeft + canvas.offsetWidth\n        },\n        {\n          mute,\n          unmute,\n          volumeDown,\n          volumeUp\n        } = soundsOptions.icons,\n        margin = 10;\n      const toggleMute = () => {\n        container.muted = !container.muted;\n        _this3._updateMuteIcons();\n        _this3._updateMuteStatus();\n      };\n      _this3._muteImg = initImage({\n        container,\n        options,\n        pos,\n        display: \"block\",\n        iconOptions: mute,\n        margin,\n        rightOffsets: [volumeDown.width, volumeUp.width],\n        clickCb: toggleMute\n      });\n      _this3._unmuteImg = initImage({\n        container,\n        options,\n        pos,\n        display: \"none\",\n        iconOptions: unmute,\n        margin,\n        rightOffsets: [volumeDown.width, volumeUp.width],\n        clickCb: toggleMute\n      });\n      _this3._volumeDownImg = initImage({\n        container,\n        options,\n        pos,\n        display: \"block\",\n        iconOptions: volumeDown,\n        margin,\n        rightOffsets: [volumeUp.width],\n        clickCb: () => {\n          if (container.muted) {\n            _this3._volume = 0;\n          }\n          _this3._volume -= soundsOptions.volume.step;\n          _this3._updateVolume();\n        }\n      });\n      _this3._volumeUpImg = initImage({\n        container,\n        options,\n        pos,\n        display: \"block\",\n        iconOptions: volumeUp,\n        margin,\n        rightOffsets: [],\n        clickCb: () => {\n          if (container.muted) {\n            _this3._volume = 0;\n          }\n          _this3._volume += soundsOptions.volume.step;\n          _this3._updateVolume();\n        }\n      });\n    })();\n  }\n  stop() {\n    this._container.muted = true;\n    this._mute();\n    removeImage(this._muteImg);\n    removeImage(this._unmuteImg);\n    removeImage(this._volumeDownImg);\n    removeImage(this._volumeUpImg);\n  }\n}","map":{"version":3,"names":["clamp","executeOnSingleOrMultiple","getLogger","isArray","isNumber","itemFromArray","itemFromSingleOrMultiple","getNoteFrequency","initImage","data","img","document","createElement","clickCb","container","display","iconOptions","margin","options","pos","rightOffsets","width","path","svg","setIconStyle","top","right","length","reduce","a","b","fullScreen","zIndex","src","btoa","parent","canvas","element","parentNode","body","append","addEventListener","removeImage","image","remove","icon","left","style","userSelect","webkitUserSelect","position","SoundsInstance","constructor","engine","_this","_addBuffer","audioCtx","buffer","createBufferSource","_audioSources","push","_addOscillator","oscillator","createOscillator","_initEvents","_container","soundsOptions","actualOptions","sounds","enable","event","events","cb","_ref","_asyncToGenerator","args","muted","destroyed","item","_engine","removeEventListener","filter","audio","_playBuffer","melodies","melody","Promise","allSettled","map","m","_playNote","notes","loop","note","_x","apply","arguments","_mute","audioContext","source","_removeAudioSource","_gain","disconnect","close","undefined","dispatchEvent","audioBuffer","_audioMap","get","connect","destination","start","_playFrequency","_ref2","frequency","duration","type","value","resolve","setTimeout","_x2","_x3","_playMuteSound","gain","createGain","stop","_ref3","noteIdx","promises","_ref4","_","idx","_playNoteValue","_x7","_x8","nextNoteIdx","_x4","_x5","_x6","_ref5","valueIdx","freq","e","error","_x9","_x10","_x11","splice","indexOf","_unmute","AudioContext","volume","_updateMuteIcons","muteImg","_muteImg","unmuteImg","_unmuteImg","_updateMuteStatus","_updateVolume","_volume","min","max","stateChanged","Map","init","_this2","_ref6","response","fetch","ok","arrayBuffer","decodeAudioData","set","_x12","_this3","offsetTop","offsetLeft","offsetWidth","mute","unmute","volumeDown","volumeUp","icons","toggleMute","_volumeDownImg","step","_volumeUpImg"],"sources":["/Users/namcuong757/snva/copy_main2/crm-dec4/CRM_Frontend/node_modules/tsparticles-plugin-sounds/esm/SoundsInstance.js"],"sourcesContent":["import { clamp, executeOnSingleOrMultiple, getLogger, isArray, isNumber, itemFromArray, itemFromSingleOrMultiple, } from \"tsparticles-engine\";\nimport { getNoteFrequency } from \"./utils\";\nfunction initImage(data) {\n    const img = document.createElement(\"img\"), { clickCb, container, display, iconOptions, margin, options, pos, rightOffsets } = data, { width, path, svg } = iconOptions;\n    setIconStyle(img, pos.top + margin, pos.right - (margin * (rightOffsets.length + 1) + width + rightOffsets.reduce((a, b) => a + b, 0)), display, options.fullScreen.zIndex + 1, width, margin);\n    img.src = path ?? (svg ? `data:image/svg+xml;base64,${btoa(svg)}` : \"\");\n    const parent = container.canvas.element?.parentNode || document.body;\n    parent.append(img);\n    img.addEventListener(\"click\", clickCb);\n    return img;\n}\nfunction removeImage(image) {\n    if (!image) {\n        return;\n    }\n    image.remove();\n}\nfunction setIconStyle(icon, top, left, display, zIndex, width, margin) {\n    icon.style.userSelect = \"none\";\n    icon.style.webkitUserSelect = \"none\";\n    icon.style.position = \"absolute\";\n    icon.style.top = `${top + margin}px`;\n    icon.style.left = `${left - margin - width}px`;\n    icon.style.display = display;\n    icon.style.zIndex = `${zIndex + 1}`;\n}\nexport class SoundsInstance {\n    constructor(container, engine) {\n        this._addBuffer = (audioCtx) => {\n            const buffer = audioCtx.createBufferSource();\n            this._audioSources.push(buffer);\n            return buffer;\n        };\n        this._addOscillator = (audioCtx) => {\n            const oscillator = audioCtx.createOscillator();\n            this._audioSources.push(oscillator);\n            return oscillator;\n        };\n        this._initEvents = () => {\n            const container = this._container, soundsOptions = container.actualOptions.sounds;\n            if (!soundsOptions?.enable || !container.canvas.element) {\n                return;\n            }\n            for (const event of soundsOptions.events) {\n                const cb = async (args) => {\n                    if (this._container !== args.container) {\n                        return;\n                    }\n                    if (!this._container || this._container.muted || this._container.destroyed) {\n                        executeOnSingleOrMultiple(event.event, (item) => {\n                            this._engine.removeEventListener(item, cb);\n                        });\n                        return;\n                    }\n                    if (event.filter && !event.filter(args)) {\n                        return;\n                    }\n                    if (event.audio) {\n                        this._playBuffer(itemFromSingleOrMultiple(event.audio));\n                    }\n                    else if (event.melodies) {\n                        const melody = itemFromArray(event.melodies);\n                        if (melody.melodies.length) {\n                            await Promise.allSettled(melody.melodies.map((m) => this._playNote(m.notes, 0, melody.loop)));\n                        }\n                        else {\n                            await this._playNote(melody.notes, 0, melody.loop);\n                        }\n                    }\n                    else if (event.notes) {\n                        const note = itemFromArray(event.notes);\n                        await this._playNote([note], 0, false);\n                    }\n                };\n                executeOnSingleOrMultiple(event.event, (item) => {\n                    this._engine.addEventListener(item, cb);\n                });\n            }\n        };\n        this._mute = () => {\n            const container = this._container;\n            if (!container.audioContext) {\n                return;\n            }\n            for (const source of this._audioSources) {\n                this._removeAudioSource(source);\n            }\n            if (this._gain) {\n                this._gain.disconnect();\n            }\n            container.audioContext.close();\n            container.audioContext = undefined;\n            this._engine.dispatchEvent(\"soundsMuted\", { container: this._container });\n        };\n        this._playBuffer = (audio) => {\n            const audioBuffer = this._audioMap.get(audio.source);\n            if (!audioBuffer) {\n                return;\n            }\n            const audioCtx = this._container.audioContext;\n            if (!audioCtx) {\n                return;\n            }\n            const source = this._addBuffer(audioCtx);\n            source.loop = audio.loop;\n            source.buffer = audioBuffer;\n            source.connect(this._gain ?? audioCtx.destination);\n            source.start();\n        };\n        this._playFrequency = async (frequency, duration) => {\n            if (!this._container.audioContext || !this._gain) {\n                return;\n            }\n            const oscillator = this._addOscillator(this._container.audioContext);\n            oscillator.connect(this._gain);\n            oscillator.type = \"sine\";\n            oscillator.frequency.value = frequency;\n            oscillator.start();\n            return new Promise((resolve) => {\n                setTimeout(() => {\n                    this._removeAudioSource(oscillator);\n                    resolve();\n                }, duration);\n            });\n        };\n        this._playMuteSound = () => {\n            const container = this._container;\n            if (!container.audioContext) {\n                return;\n            }\n            const gain = container.audioContext.createGain();\n            gain.connect(container.audioContext.destination);\n            gain.gain.value = 0;\n            const oscillator = container.audioContext.createOscillator();\n            oscillator.connect(gain);\n            oscillator.type = \"sine\";\n            oscillator.frequency.value = 1;\n            oscillator.start();\n            setTimeout(() => {\n                oscillator.stop();\n                oscillator.disconnect();\n                gain.disconnect();\n            });\n        };\n        this._playNote = async (notes, noteIdx, loop) => {\n            if (this._container.muted) {\n                return;\n            }\n            const note = notes[noteIdx];\n            if (!note) {\n                return;\n            }\n            const value = note.value;\n            const promises = executeOnSingleOrMultiple(value, async (_, idx) => {\n                return this._playNoteValue(notes, noteIdx, idx);\n            });\n            await (isArray(promises) ? Promise.allSettled(promises) : promises);\n            let nextNoteIdx = noteIdx + 1;\n            if (loop && nextNoteIdx >= notes.length) {\n                nextNoteIdx = nextNoteIdx % notes.length;\n            }\n            if (this._container.muted) {\n                return;\n            }\n            await this._playNote(notes, nextNoteIdx, loop);\n        };\n        this._playNoteValue = async (notes, noteIdx, valueIdx) => {\n            const note = notes[noteIdx];\n            if (!note) {\n                return;\n            }\n            const value = itemFromSingleOrMultiple(note.value, valueIdx, true);\n            try {\n                const freq = getNoteFrequency(value);\n                if (!isNumber(freq)) {\n                    return;\n                }\n                await this._playFrequency(freq, note.duration);\n            }\n            catch (e) {\n                getLogger().error(e);\n            }\n        };\n        this._removeAudioSource = (source) => {\n            source.stop();\n            source.disconnect();\n            this._audioSources.splice(this._audioSources.indexOf(source), 1);\n        };\n        this._unmute = () => {\n            const container = this._container, options = container.actualOptions, soundsOptions = options.sounds;\n            if (!soundsOptions) {\n                return;\n            }\n            if (!container.audioContext) {\n                container.audioContext = new AudioContext();\n            }\n            const { audioContext } = container;\n            if (!this._audioSources) {\n                this._audioSources = [];\n            }\n            const gain = audioContext.createGain();\n            gain.connect(audioContext.destination);\n            gain.gain.value = soundsOptions.volume.value / 100;\n            this._gain = gain;\n            this._initEvents();\n            this._engine.dispatchEvent(\"soundsUnmuted\", { container: this._container });\n        };\n        this._updateMuteIcons = () => {\n            const container = this._container, muteImg = this._muteImg, unmuteImg = this._unmuteImg;\n            if (muteImg) {\n                muteImg.style.display = container.muted ? \"block\" : \"none\";\n            }\n            if (unmuteImg) {\n                unmuteImg.style.display = container.muted ? \"none\" : \"block\";\n            }\n        };\n        this._updateMuteStatus = () => {\n            const container = this._container;\n            if (container.muted) {\n                this._mute();\n            }\n            else {\n                this._unmute();\n                this._playMuteSound();\n            }\n        };\n        this._updateVolume = () => {\n            const container = this._container, soundsOptions = container.actualOptions.sounds;\n            if (!soundsOptions?.enable) {\n                return;\n            }\n            clamp(this._volume, soundsOptions.volume.min, soundsOptions.volume.max);\n            let stateChanged = false;\n            if (this._volume <= 0 && !container.muted) {\n                this._volume = 0;\n                container.muted = true;\n                stateChanged = true;\n            }\n            else if (this._volume > 0 && container.muted) {\n                container.muted = false;\n                stateChanged = true;\n            }\n            if (stateChanged) {\n                this._updateMuteIcons();\n                this._updateMuteStatus();\n            }\n            if (this._gain?.gain) {\n                this._gain.gain.value = this._volume / 100;\n            }\n        };\n        this._container = container;\n        this._engine = engine;\n        this._volume = 0;\n        this._audioSources = [];\n        this._audioMap = new Map();\n    }\n    async init() {\n        const container = this._container, options = container.actualOptions, soundsOptions = options.sounds;\n        if (!soundsOptions?.enable) {\n            return;\n        }\n        this._volume = soundsOptions.volume.value;\n        const events = soundsOptions.events;\n        this._audioMap = new Map();\n        for (const event of events) {\n            if (!event.audio) {\n                continue;\n            }\n            executeOnSingleOrMultiple(event.audio, async (audio) => {\n                const response = await fetch(audio.source);\n                if (!response.ok) {\n                    return;\n                }\n                const arrayBuffer = await response.arrayBuffer();\n                container.audioContext = new AudioContext();\n                const audioBuffer = await container.audioContext.decodeAudioData(arrayBuffer);\n                this._audioMap.set(audio.source, audioBuffer);\n            });\n        }\n    }\n    async start() {\n        const container = this._container, options = container.actualOptions, soundsOptions = options.sounds;\n        if (!soundsOptions?.enable || !container.canvas.element) {\n            return;\n        }\n        container.muted = true;\n        const canvas = container.canvas.element, pos = {\n            top: canvas.offsetTop,\n            right: canvas.offsetLeft + canvas.offsetWidth,\n        }, { mute, unmute, volumeDown, volumeUp } = soundsOptions.icons, margin = 10;\n        const toggleMute = () => {\n            container.muted = !container.muted;\n            this._updateMuteIcons();\n            this._updateMuteStatus();\n        };\n        this._muteImg = initImage({\n            container,\n            options,\n            pos,\n            display: \"block\",\n            iconOptions: mute,\n            margin,\n            rightOffsets: [volumeDown.width, volumeUp.width],\n            clickCb: toggleMute,\n        });\n        this._unmuteImg = initImage({\n            container,\n            options,\n            pos,\n            display: \"none\",\n            iconOptions: unmute,\n            margin,\n            rightOffsets: [volumeDown.width, volumeUp.width],\n            clickCb: toggleMute,\n        });\n        this._volumeDownImg = initImage({\n            container,\n            options,\n            pos,\n            display: \"block\",\n            iconOptions: volumeDown,\n            margin,\n            rightOffsets: [volumeUp.width],\n            clickCb: () => {\n                if (container.muted) {\n                    this._volume = 0;\n                }\n                this._volume -= soundsOptions.volume.step;\n                this._updateVolume();\n            },\n        });\n        this._volumeUpImg = initImage({\n            container,\n            options,\n            pos,\n            display: \"block\",\n            iconOptions: volumeUp,\n            margin,\n            rightOffsets: [],\n            clickCb: () => {\n                if (container.muted) {\n                    this._volume = 0;\n                }\n                this._volume += soundsOptions.volume.step;\n                this._updateVolume();\n            },\n        });\n    }\n    stop() {\n        this._container.muted = true;\n        this._mute();\n        removeImage(this._muteImg);\n        removeImage(this._unmuteImg);\n        removeImage(this._volumeDownImg);\n        removeImage(this._volumeUpImg);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}