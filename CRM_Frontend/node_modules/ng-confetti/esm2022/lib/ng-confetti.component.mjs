import { isPlatformServer } from '@angular/common';
import { Component, Inject, Input, PLATFORM_ID } from '@angular/core';
import { Subject } from 'rxjs';
import { confetti } from 'tsparticles-confetti';
import * as i0 from "@angular/core";
export class NgConfettiComponent {
    constructor(platformId) {
        this.platformId = platformId;
        this.destroy$ = new Subject();
        this.id = 'tsparticles';
        this.fire = true;
    }
    ngAfterViewInit() {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        (async () => {
            if (this.fire) {
                this.container = await confetti(this.id, this.options);
            }
        })();
    }
    ngOnChanges(changes) {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        const fireChanges = changes['fire'];
        if (this.fire && fireChanges && fireChanges.previousValue !== fireChanges.currentValue) {
            (async () => {
                this.container = await confetti(this.id, this.options);
            })();
        }
    }
    ngOnDestroy() {
        this.container?.destroy();
        this.destroy$.next();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: NgConfettiComponent, deps: [{ token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.8", type: NgConfettiComponent, selector: "ng-confetti", inputs: { options: "options", id: "id", fire: "fire" }, usesOnChanges: true, ngImport: i0, template: '<div [id]="id"></div>', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.8", ngImport: i0, type: NgConfettiComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ng-confetti',
                    template: '<div [id]="id"></div>',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; }, propDecorators: { options: [{
                type: Input
            }], id: [{
                type: Input
            }], fire: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctY29uZmV0dGkuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmctY29uZmV0dGkvc3JjL2xpYi9uZy1jb25mZXR0aS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbkQsT0FBTyxFQUFpQixTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBYSxXQUFXLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQy9HLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFFBQVEsRUFBbUIsTUFBTSxzQkFBc0IsQ0FBQzs7QUFPakUsTUFBTSxPQUFPLG1CQUFtQjtJQVE1QixZQUEyQyxVQUFrQjtRQUFsQixlQUFVLEdBQVYsVUFBVSxDQUFRO1FBRnJELGFBQVEsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBR25DLElBQUksQ0FBQyxFQUFFLEdBQUcsYUFBYSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0lBQ3JCLENBQUM7SUFFTSxlQUFlO1FBQ2xCLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ25DLE9BQU87U0FDVjtRQUVELENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDUixJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7Z0JBQ1gsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUMxRDtRQUNMLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDVCxDQUFDO0lBRU0sV0FBVyxDQUFDLE9BQXNCO1FBQ3JDLElBQUksZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ25DLE9BQU87U0FDVjtRQUVELE1BQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVwQyxJQUFJLElBQUksQ0FBQyxJQUFJLElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxhQUFhLEtBQUssV0FBVyxDQUFDLFlBQVksRUFBRTtZQUNwRixDQUFDLEtBQUssSUFBSSxFQUFFO2dCQUNSLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDM0QsQ0FBQyxDQUFDLEVBQUUsQ0FBQztTQUNSO0lBQ0wsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDekIsQ0FBQzs4R0ExQ1EsbUJBQW1CLGtCQVFSLFdBQVc7a0dBUnRCLG1CQUFtQixnSUFGbEIsdUJBQXVCOzsyRkFFeEIsbUJBQW1CO2tCQUovQixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxhQUFhO29CQUN2QixRQUFRLEVBQUUsdUJBQXVCO2lCQUNwQzs7MEJBU2dCLE1BQU07MkJBQUMsV0FBVzs0Q0FQdEIsT0FBTztzQkFBZixLQUFLO2dCQUNHLEVBQUU7c0JBQVYsS0FBSztnQkFDRyxJQUFJO3NCQUFaLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc1BsYXRmb3JtU2VydmVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgSW5qZWN0LCBJbnB1dCwgT25DaGFuZ2VzLCBQTEFURk9STV9JRCwgU2ltcGxlQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgY29uZmV0dGksIENvbmZldHRpT3B0aW9ucyB9IGZyb20gJ3RzcGFydGljbGVzLWNvbmZldHRpJztcbmltcG9ydCB0eXBlIHsgQ29udGFpbmVyIH0gZnJvbSAndHNwYXJ0aWNsZXMtZW5naW5lJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZy1jb25mZXR0aScsXG4gICAgdGVtcGxhdGU6ICc8ZGl2IFtpZF09XCJpZFwiPjwvZGl2PicsXG59KVxuZXhwb3J0IGNsYXNzIE5nQ29uZmV0dGlDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkNoYW5nZXMge1xuICAgIEBJbnB1dCgpIG9wdGlvbnM/OiBDb25mZXR0aU9wdGlvbnM7XG4gICAgQElucHV0KCkgaWQ6IHN0cmluZztcbiAgICBASW5wdXQoKSBmaXJlOiBib29sZWFuIHwgbnVtYmVyO1xuXG4gICAgcHJpdmF0ZSBjb250YWluZXI/OiBDb250YWluZXI7XG4gICAgcHJpdmF0ZSBkZXN0cm95JCA9IG5ldyBTdWJqZWN0PHZvaWQ+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFBMQVRGT1JNX0lEKSBwcm90ZWN0ZWQgcGxhdGZvcm1JZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuaWQgPSAndHNwYXJ0aWNsZXMnO1xuICAgICAgICB0aGlzLmZpcmUgPSB0cnVlO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XG4gICAgICAgIGlmIChpc1BsYXRmb3JtU2VydmVyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5maXJlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWluZXIgPSBhd2FpdCBjb25mZXR0aSh0aGlzLmlkLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XG4gICAgICAgIGlmIChpc1BsYXRmb3JtU2VydmVyKHRoaXMucGxhdGZvcm1JZCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGZpcmVDaGFuZ2VzID0gY2hhbmdlc1snZmlyZSddO1xuXG4gICAgICAgIGlmICh0aGlzLmZpcmUgJiYgZmlyZUNoYW5nZXMgJiYgZmlyZUNoYW5nZXMucHJldmlvdXNWYWx1ZSAhPT0gZmlyZUNoYW5nZXMuY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFpbmVyID0gYXdhaXQgY29uZmV0dGkodGhpcy5pZCwgdGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIH0pKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29udGFpbmVyPy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZGVzdHJveSQubmV4dCgpO1xuICAgIH1cbn1cbiJdfQ==